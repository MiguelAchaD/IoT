# Generated by Django 5.1 on 2025-01-11 22:39

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    operations = [
        migrations.CreateModel(
            name='Endpoint',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('method', models.TextField()),
                ('url', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Key',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key_value', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date_time', models.DateTimeField()),
                ('heart_rate', models.FloatField()),
                ('ambient_temperature', models.FloatField()),
                ('xyz_accelerometer', models.TextField()),
                ('is_exposed_to_light', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Reunion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField(blank=True, null=True)),
                ('url', models.URLField(blank=True, max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Api',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('base_url', models.TextField()),
                ('headers', models.JSONField()),
                ('endpoints', models.ManyToManyField(to='ServerApp.endpoint')),
            ],
        ),
        migrations.CreateModel(
            name='ApiKeys',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('api_name', models.TextField(unique=True)),
                ('key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ServerApp.key')),
            ],
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('day_of_record', models.DateField()),
                ('records', models.ManyToManyField(to='ServerApp.record')),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('public_id', models.TextField()),
                ('name', models.TextField()),
                ('age', models.IntegerField()),
                ('sex', models.TextField()),
                ('city', models.TextField()),
                ('status', models.TextField()),
                ('record_history', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ServerApp.history')),
                ('reunions', models.ManyToManyField(to='ServerApp.reunion')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=150)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('patients', models.ManyToManyField(to='ServerApp.patient')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
